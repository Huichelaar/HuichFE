#ifndef jumpToHack_r0
  #define jumpToHack_r0(offset) "SHORT 0x4800 0x4700; POIN (offset|0x1)"
#endif

PUSH

// Increment 3 UNITS instead of 1.
ORG 0xF664; BYTE 0x3C
ORG 0xF696; BYTE 0xFD
ORG 0xF6E6; BYTE 0x3C
ORG 0xF702; BYTE 0xFD

// Pick UNIT, based on absolute level.
ORG 0xF714
jumpToHack_r0(SCU_PickScaledUnit)

// Calc & buffer player army level when LOAD.
ORG 0xFB84
jumpToHack(SCU_UnitLoadHook)

//TODO! AutolevelUnit & AutolevelRealistic!
ORG 0x18160
jumpToHack(SCU_AutolevelRealistic)
//ORG 0x1812A


POP


ALIGN 4; SCU_UnitLoadHook:
#include "UnitLoadHook.lyn.event"
ALIGN 4; SCU_CalcPlayerLevel:           // Called by SCU_UnitLoadHook
#include "CalcPlayerLevel.lyn.event"
ALIGN 4; SCU_PickScaledUnit:
#include "PickScaledUnit.lyn.event"
ALIGN 4;
#include "Autolevel.lyn.event"
//}
ALIGN 4; SCU_CalcLoadedUnitLevel:       // Called by SuspendDebuffs' NewInitializer.
#include "CalcLoadedUnitLevel.lyn.event"